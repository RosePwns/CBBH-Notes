# Chandler Rose 
# Web App Pentesting
# HTB Bug Bounty Notes
# March 2023

# Information Gathering (Passive)
## Infrastructure
- Netcraft - Offers information about servers
-- Visit https://sitereport.netcraft.com and entering the target domain.
- WayBack Machine
-- FInd old versions that may have useful comments or exposures
## Subdomains
- VirusTotal
-- VirusTotal maintains its DNS replication service, which is developed by preserving DNS resolutions made when users visit URLs given by them.
-- To receive information about a domain, type the domain name into the search bar and click on the "Relations" tab.
- Certificates
-- Another interesting source of information we can use to extract subdomains is SSL/TLS certificates. The main reason is Certificate Transparency (CT), a project that requires every SSL/TLS certificate issued by a Certificate Authority (CA) to be published in a publicly accessible log.
-- Examine CT logs/Find subdomains with https://censys.io & https://crt.sh. Introduce the domain name of our target organization to start discovering new subdomains. # Great for finding subdomains
Command: export TARGET="facebook.com"
Command: curl -s "https://crt.sh/?q=${TARGET}&output=json" | jq -r '.[] | "\(.name_value)\n\(.common_name)"' | sort -u > "${TARGET}_crt.sh.txt"
Command: head -n20 facebook.com_crt.sh.txt
- The Harvester
-- TheHarvester is a simple-to-use yet powerful and effective tool for early-stage penetration testing and red team engagements. We can use it to gather information to help identify a company's attack surface. The tool collects emails, names, subdomains, IP addresses, and URLs from various public data sources for passive information gathering.
# Information Gathering (Active)
## Infrastructure
- HTTP headers
curl -I "http://${TARGET}"
- WhatWeb
-- Quick 
whatweb -a3 https://www.facebook.com -v
- Wappalyzer
-- Like whatweb in the browser. 
- WafW00f
-- web application firewall (WAF) fingerprinting tool that sends requests and analyses responses to determine if a security solution is in place.
Install: sudo apt install wafw00f -y
Command: wafw00f -v https://www.tesla.com
- AquaTone
-- a tool for automatic and visual inspection of websites across many hosts and is convenient for quickly gaining an overview of HTTP-based attack surfaces by scanning a list of configurable ports, visiting the website with a headless Chrome browser, and taking and screenshot.
Install: sudo apt install golang chromium-driver
Install: go get github.com/michenriksen/aquatone
Install: export PATH="$PATH":"$HOME/go/bin"
Command: cat facebook_aquatone.txt | aquatone -out ./aquatone -screenshot-timeout 1000
## Subdomain
- Zone Transfer 
Command: nslookup -type=NS zonetransfer.me # Testing for name servers
Command: nslookup -type=any -query=AXFR zonetransfer.me nsztm1.digi.ninja # Testing for ANY and AXFR Zone Transfer
Command: nslookup -type=any -query=AXFR inlanefreight.htb 10.129.42.195 # FInd the FQDN.
Command: dig @10.129.178.67 NS axfr inlanefreight.htb # Get all Zone transfers
- Gobuster
-- Gobuster is a tool that we can use to perform subdomain enumeration.
-- Remember that during our passive subdomain enumeration activities, we found a pattern lert-api-shv-{NUMBER}-sin6.facebook.com. We can use this pattern to discover additional subdomains. The first step will be to create a patterns.txt file with the patterns previously discovered, for example:
Command: echo "lert-api-shv-{GOBUSTER}-sin6", "atlas-pp-shv-{GOBUSTER}-sin6" > patterns.txt
Command: export TARGET="facebook.com"
Command: export NS="d.ns.facebook.com"
Command: export WORDLIST="numbers.txt"
Command: gobuster dns -q -r "${NS}" -d "${TARGET}" -w "${WORDLIST}" -p ./patterns.txt -o "gobuster_${TARGET}.txt"
## Virtual Hosts
* A virtual host (vHost) is a feature that allows several websites to be hosted on a single server.
- Identify Virtual Host
Command: curl -s http://192.168.10.10 # Web server identified at that IP.
Command: curl -s http://192.168.10.10 -H "Host: randomtarget.com" # curl request sending domain previously identified in the HOST header.
Command: cp /opt/useful/SecLists/Discovery/DNS/namelist.txt ./vhosts
- VHost Fuzzing
Command: cat ./vhosts | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://192.168.10.10 -H "HOST: ${vhost}.randomtarget.com" | grep "Content-Length: ";done
- Access Found VHost
Command: curl -s http://192.168.10.10 -H "Host: dev-admin.randomtarget.com"
- FFUF - Fuzz Faster U Fool
Command: curl -s http://192.168.10.10 -H "Host: dev-admin.randomtarget.com" # Fuzzing for VHost with size filter
## Website Crawling
Command: ffuf -recursion -recursion-depth 1 -u http://192.168.10.10/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt # This task can be very resource-intensive for the target server. If the website responds slower than usual, we can lower the rate of requests using the -rate parameter.
- *Finding Sensitive Information*
-- First create a list of found directory names from the wesbite. Save as folders.txt
-- Next create a file of all the common extensions. Save to extensions.txt 
Command: cewl -m5 --lowercase -w wordlist.txt http://192.168.10.10 # Grabbing keywords that are 5 chars or more, converting to lowercase and saving to .txt file.
Command: ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://192.168.10.10/FOLDERS/WORDLISTEXTENSIONS #  We separate the wordlists by coma and add an alias to them to inject them as fuzzing points later
# Attacking Web Applications with FUFF
- Directory Fuzzing
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ # Assign alias to wordlist and use it in the url.
## Extension Fuzzing
- One common way to identify that is by finding the server type through the HTTP response headers and guessing the extension. For example, if the server is apache, then it may be .php, or if it was IIS, then it could be .asp or .aspx, and so one. 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ
## Page Fuzzing
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php
## Recursive Fuzzing
- This is why it is always advised to specify a depth to our recursive scan, such that it will not scan directories that are deeper than that depth. 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v 
## Sub-domain Fuzzing 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u https://FUZZ.hackthebox.eu/
## VHOST Fuzzing
Note: The key difference between VHosts and sub-domains is that a VHost is basically a 'sub-domain' served on the same server and has the same IP, such that a single IP could be serving two or more different websites.
Note: VHosts may or may not have public DNS records.
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' # To scan for VHosts, without manually adding the entire wordlist to our /etc/hosts, we will be fuzzing HTTP headers, specifically the Host: header. To do that, we can use the -H flag to specify a header and will use the FUZZ keyword within it, as follows:
## Filtering Results
Command: FUFF --help | grep filter 
## Parameter Fuzzing - GET
Note: Fuzzing parameters may expose unpublished parameters that are publicly accessible. Such parameters tend to be less tested and less secured, so it is important to test such parameters for the web vulnerabilities we discuss in other modules.
Example: http://admin.academy.htb:PORT/admin/admin.php?param1=key. # Param = param1
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb/admin/admin.php?FUZZ=key -fs xxx
## Parameter Fuzzing - POST
Note: The main difference between POST requests and GET requests is that POST requests are not passed with the URL and cannot simply be appended after a ? symbol. POST requests are passed in the data field within the HTTP request.
Tip: In PHP, "POST" data "content-type" can only accept "application/x-www-form-urlencoded". So, we can set that in "ffuf" with "-H 'Content-Type: application/x-www-form-urlencoded'".
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
Note: Try sending a POST request with the id parameter. We can do that with curl.
Command: curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'
Note: We get a response that says "Invalid ID", which brings us to fuzzing for values.
## Value Fuzzing
Note: This section will discuss fuzzing for parameter values, which should be fairly similar to fuzzing for parameters, once we develop our wordlist.
- Custom Wordlists
Note: When it comes to fuzzing parameter values, we may not always find a pre-made wordlist that would work for us, as each parameter would expect a certain type of value. 
Command: for i in $(seq 1 1000); do echo $i >> ids.txt; done # Bash command to create a list from 1-1000
- Fuzzing Values
Command: ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
# Javascript Deobfuscation
Note: Obfuscation is a technique used to make a script more difficult to read by humans but allows it to function the same from a technical point of view, though performance may be slower. 
Dev-Note: Doing authentication or encryption on the client-side is not recommended, as code is more prone to attacks this way.
Pro-TIP: Many online tools for obfuscation, though many malicious actors and professional developers develop their own obfuscation tools to make it more difficult to deobfuscate.
## Minifying JavaScript code
Note: Code minification means having the entire code in a single (often very long) line. Code minification is more useful for longer code, as if our code only consisted of a single line, it would not look much different when minified.
Note: Usually, minified JavaScript code is saved with the extension .min.js. Code minification is not exclusive to JavaScript, and can be applied to many other languages, as can be seen on javascript-minifier.
## Packing Javascript Code
Obfuscate Site: https://beautifytools.com/javascript-obfuscator.php
Note: Usually recognizable from the six function arguments used in the initial function "function(p,a,c,k,e,d)".
Test Site: https://jsconsole.com
## Advanced Obfuscation
AdvObfuscater: https://obfuscator.io
## Deobfuscation 
Method 1: Beautify The Code
- open Dev Tools/Debugger, click script.js, click Pretty Print{}.
Beautify Sites: https://prettier.io/playground/   &   https://beautifier.io/
Method 2: Deobfuscate The Code
Site: http://www.jsnice.org/
Note: We should click on the options button next to the "Nicify JavaScript" button, and de-select "Infer types" to reduce cluttering the code with comments.
Note: Ensure you do not leave any empty lines before the script, as it may affect the deobfuscation process and give inaccurate results.
Note: Another way of unpacking such code is to find the return value at the end and use console.log to print it instead of executing it.
## Reverse Engineering
Note: These methods are great, but once the code becomes even more obfuscated or a custom obfuscater is used, it can become more difficult to deobfuscate the code. 
Note: At this point, we would need to manually reverse engineer the code. 
Great Tool: https://lelinhtinh.github.io/de4js/ # Used during skill assessments.
## Code Analysis
- Code Variables - What is being stored? 
- Code Objects - Check them out. Research them if necessary.
- Code Functions - Check them out. What is the function performing? GET or POST request? To where?
Command: curl -s http://SERVER_IP:PORT/ -X POST -d "param1=sample"
Tip: We add the "-s" flag to reduce cluttering the response with unnecessary data.
## Decoding 
Note: Very often you will find obfuscated code containing encoded text blocks that get decoded upon execution. 
Commonly used Text Encoding Methods:
* base64
Command: echo aHR0cHM6Ly93d3cuaGFja3RoZWJveC5ldS8K | base64 -d # Decoding base64
Note: Spotting Base64 is easy. The length of base64 encoded strings has to be in a multiple of 4. If the resulting output is only 3 characters long, for example, an extra = is added as padding, and so on.
* hex
Note: Spotting hex is also easy. Any string encoded in hex would be comprised of hex characters only, which are 16 characters only: 0-9 and a-f.
Command: echo 68747470733a2f2f7777772e6861636b746865626f782e65752f0a | xxd -p -r # Decoding Hex
* rot13
Note: Spotting rot13 can be easy as well. Even though this encoding method makes any text looks random, it is still possible to spot it because each character is mapped to a specific character. For example, in rot13, http://www becomes uggc://jjj, which still holds some resemblances and may be recognized as such.
Command: echo uggcf://jjj.unpxgurobk.rh/ | tr 'A-Za-z' 'N-ZA-Mn-za-m' # Decode rot13
Decode Site: https://rot13.com/
NOTE: There are hundreds of other encoding methods we can find online. Even though these are the most common, sometimes we will come across other encoding methods, which may require some experience to identify and decode.
Identify Encoding Type Website: https://www.boxentriq.com/code-breaking/cipher-identifier
# Cross-Site Scripting (XSS)
Note: XSS vulnerabilities take advantage of a flaw in user input sanitization to "write" JavaScript code >
Note: XSS vulnerabilities are solely executed on the client-side and hence do not directly affect the bac>
Risk: Medium Risk (low impact + high probability = medium risk)
Types of XSS:
* Stored(Persistent) XSS - Most critical.
* Reflected(Non-Persistent) XSS - User input displayed to the page.
* DOM-Based XSS - Non-persistent. User input is shown in the browser, completely processed on client-side.
## XSS Testing Payloads
Payload: <script>alert(window.origin)</script> # Alert pop up with the URL of the current page.
Note: You can verify by checking the page source and seeing if your payload is there.
Pro Tip: Tip: Many modern web applications utilize cross-domain IFrames to handle user input, so that even if the web form is vulnerable to XSS, it would not be a vulnerability on the main web application. This is why we are showing the value of window.origin in the alert box, instead of a static value like 1. In this case, the alert box would reveal the URL it is being executed on, and will confirm which form is the vulnerable one, in case an IFrame was being used.
Note: Some modern browsers may block the alert() JavaScript function in specific locations
Note: One such XSS payload is <plaintext>, which will stop rendering the HTML code that comes after it and display it as plaintext. Another easy-to-spot payload is <script>print()</script> that will pop up the browser print dialog, which is unlikely to be blocked by any browsers. Try using these payloads to see how each works. You may use the reset button to remove any current payloads.
Note: Once found, refresh the page to see whether the alert stays or goes. Stored or Reflected?
Payload: <script>alert(document.cookie)</script> # Simple payload to show session cookie
Question: But if the XSS vulnerability is Non-Persistent, how would we target victims with it?
Answer: Figure out what type of HTTP request is being used. 
Commands: Open Dev Tools, Netowork tab, test payload again, GET request?, Copy URL, send URL to target.
Note: DOM XSS occurs when JavaScript is used to change the page source through the Document Object Model (DOM). No interaction with the backend.
- Source and Sink
Note: To better understand DOM-based XSS vulnerabilities, it is important to understand S & S.
Note: Source = The Source is the JavaScript object that takes the user input, and it can be any input parameter like a URL parameter or an input field, as we saw above.
Note: Sink = The Sink is the function that writes the user input to a DOM Object on the page. 
- Common JS Functions to Write to DOM Objects:
* document.write()
* DOM.innerHTML
* DOM.outerHTML
- Common jQuery Library functions that write to DOM objects:
* add()
* after()
* append()
- DOM-Based Testing
Note: If we try the XSS payload we have been using previously, we will see that it will not execute. This is because the innerHTML function does not allow the use of the <script> tags within it as a security feature.
Payload: <img src="" onerror=alert(window.origin)>
Note: To target a user with this DOM XSS vulnerability, we can once again copy the URL from the browser and share it with them, and once they visit it, the JavaScript code should execute.
## Discovering XSS
- Automated Discovery 
Note: Paid Tools provide the most accuracy and help bypass certain security measures, but there are plenty of open source tools.
Paid Tools: Nessus, Burp Pro, and ZAP.	
Free Tools: XSS Strike, Brute XSS, XSSer.
Command: git clone https://github.com/s0md3v/XSStrike.git # Download XSS Strike
Command: cd XSStrike
Command: pip install -r requirements.txt
Command: python xsstrike.py
Command: python xsstrike.py -u "http://SERVER_IP:PORT/index.php?task=test" # Running the tool against target.
- Manual Discovery
Payloads Link: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/README.md
Payloads Link: https://github.com/payloadbox/xss-payload-list
!Note: XSS can be injected into any input in the HTML page, which is not exclusive to HTML input fields, but may also be in HTTP headers like the Cookie or User-Agent (i.e., when their values are displayed on the page).
Note: More efficient to write a python script that automates sending these payloads for us and checking page source.
- Code Review
!Note: We are unlikely to find any XSS vulnerabilities through payload lists or XSS tools for the more common web applications. This is because the developers of such web applications likely run their application through vulnerability assessment tools and then patch any identified vulnerabilities before release.
Note: Reviewing the code from frontend to backend is the best way to detect XSS vulnerabilties.
