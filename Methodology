# Chandler Rose 
# Web App Pentesting
# March 2023

# Information Gathering (Passive)
## Infrastructure
- Netcraft - Offers information about servers
-- Visit https://sitereport.netcraft.com and entering the target domain.
- WayBack Machine
-- FInd old versions that may have useful comments or exposures
## Subdomains
- VirusTotal
-- VirusTotal maintains its DNS replication service, which is developed by preserving DNS resolutions made when users visit URLs given by them.
-- To receive information about a domain, type the domain name into the search bar and click on the "Relations" tab.
- Certificates
-- Another interesting source of information we can use to extract subdomains is SSL/TLS certificates. The main reason is Certificate Transparency (CT), a project that requires every SSL/TLS certificate issued by a Certificate Authority (CA) to be published in a publicly accessible log.
-- Examine CT logs/Find subdomains with https://censys.io & https://crt.sh. Introduce the domain name of our target organization to start discovering new subdomains. # Great for finding subdomains
Command: export TARGET="facebook.com"
Command: curl -s "https://crt.sh/?q=${TARGET}&output=json" | jq -r '.[] | "\(.name_value)\n\(.common_name)"' | sort -u > "${TARGET}_crt.sh.txt"
Command: head -n20 facebook.com_crt.sh.txt
- The Harvester
-- TheHarvester is a simple-to-use yet powerful and effective tool for early-stage penetration testing and red team engagements. We can use it to gather information to help identify a company's attack surface. The tool collects emails, names, subdomains, IP addresses, and URLs from various public data sources for passive information gathering.
# Information Gathering (Active)
## Infrastructure
- HTTP headers
curl -I "http://${TARGET}"
- WhatWeb
-- Quick 
whatweb -a3 https://www.facebook.com -v
- Wappalyzer
-- Like whatweb in the browser. 
- WafW00f
-- web application firewall (WAF) fingerprinting tool that sends requests and analyses responses to determine if a security solution is in place.
Install: sudo apt install wafw00f -y
Command: wafw00f -v https://www.tesla.com
- AquaTone
-- a tool for automatic and visual inspection of websites across many hosts and is convenient for quickly gaining an overview of HTTP-based attack surfaces by scanning a list of configurable ports, visiting the website with a headless Chrome browser, and taking and screenshot.
Install: sudo apt install golang chromium-driver
Install: go get github.com/michenriksen/aquatone
Install: export PATH="$PATH":"$HOME/go/bin"
Command: cat facebook_aquatone.txt | aquatone -out ./aquatone -screenshot-timeout 1000
## Subdomain
- Zone Transfer 
Command: nslookup -type=NS zonetransfer.me # Testing for name servers
Command: nslookup -type=any -query=AXFR zonetransfer.me nsztm1.digi.ninja # Testing for ANY and AXFR Zone Transfer
Command: nslookup -type=any -query=AXFR inlanefreight.htb 10.129.42.195 # FInd the FQDN.
Command: dig @10.129.178.67 NS axfr inlanefreight.htb # Get all Zone transfers
- Gobuster
-- Gobuster is a tool that we can use to perform subdomain enumeration.
-- Remember that during our passive subdomain enumeration activities, we found a pattern lert-api-shv-{NUMBER}-sin6.facebook.com. We can use this pattern to discover additional subdomains. The first step will be to create a patterns.txt file with the patterns previously discovered, for example:
Command: echo "lert-api-shv-{GOBUSTER}-sin6", "atlas-pp-shv-{GOBUSTER}-sin6" > patterns.txt
Command: export TARGET="facebook.com"
Command: export NS="d.ns.facebook.com"
Command: export WORDLIST="numbers.txt"
Command: gobuster dns -q -r "${NS}" -d "${TARGET}" -w "${WORDLIST}" -p ./patterns.txt -o "gobuster_${TARGET}.txt"
## Virtual Hosts
* A virtual host (vHost) is a feature that allows several websites to be hosted on a single server.
- Identify Virtual Host
Command: curl -s http://192.168.10.10 # Web server identified at that IP.
Command: curl -s http://192.168.10.10 -H "Host: randomtarget.com" # curl request sending domain previously identified in the HOST header.
Command: cp /opt/useful/SecLists/Discovery/DNS/namelist.txt ./vhosts
- VHost Fuzzing
Command: cat ./vhosts | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://192.168.10.10 -H "HOST: ${vhost}.randomtarget.com" | grep "Content-Length: ";done
- Access Found VHost
Command: curl -s http://192.168.10.10 -H "Host: dev-admin.randomtarget.com"
- FFUF - Fuzz Faster U Fool
Command: curl -s http://192.168.10.10 -H "Host: dev-admin.randomtarget.com" # Fuzzing for VHost with size filter
## Website Crawling
Command: ffuf -recursion -recursion-depth 1 -u http://192.168.10.10/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt # This task can be very resource-intensive for the target server. If the website responds slower than usual, we can lower the rate of requests using the -rate parameter.
- *Finding Sensitive Information*
-- First create a list of found directory names from the wesbite. Save as folders.txt
-- Next create a file of all the common extensions. Save to extensions.txt 
Command: cewl -m5 --lowercase -w wordlist.txt http://192.168.10.10 # Grabbing keywords that are 5 chars or more, converting to lowercase and saving to .txt file.
Command: ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://192.168.10.10/FOLDERS/WORDLISTEXTENSIONS #  We separate the wordlists by coma and add an alias to them to inject them as fuzzing points later
# Attacking Web Applications with FUFF
- Directory Fuzzing
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ # Assign alias to wordlist and use it in the url.
- Extension Fuzzing
-- One common way to identify that is by finding the server type through the HTTP response headers and guessing the extension. For example, if the server is apache, then it may be .php, or if it was IIS, then it could be .asp or .aspx, and so one. 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ
- Page Fuzzing
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php
- Recursive Fuzzing
-- This is why it is always advised to specify a depth to our recursive scan, such that it will not scan directories that are deeper than that depth. 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v 
- Sub-domain Fuzzing 
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u https://FUZZ.hackthebox.eu/
- VHOST Fuzzing
Note: The key difference between VHosts and sub-domains is that a VHost is basically a 'sub-domain' served on the same server and has the same IP, such that a single IP could be serving two or more different websites.
Note: VHosts may or may not have public DNS records.
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' # To scan for VHosts, without manually adding the entire wordlist to our /etc/hosts, we will be fuzzing HTTP headers, specifically the Host: header. To do that, we can use the -H flag to specify a header and will use the FUZZ keyword within it, as follows:
- Filtering Results
Command: FUFF --help | grep filter 
- Parameter Fuzzing - GET
Note: Fuzzing parameters may expose unpublished parameters that are publicly accessible. Such parameters tend to be less tested and less secured, so it is important to test such parameters for the web vulnerabilities we discuss in other modules.
Example: http://admin.academy.htb:PORT/admin/admin.php?param1=key. # Param = param1
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb/admin/admin.php?FUZZ=key -fs xxx
- Parameter Fuzzing - POST
Note: The main difference between POST requests and GET requests is that POST requests are not passed with the URL and cannot simply be appended after a ? symbol. POST requests are passed in the data field within the HTTP request.
Tip: In PHP, "POST" data "content-type" can only accept "application/x-www-form-urlencoded". So, we can set that in "ffuf" with "-H 'Content-Type: application/x-www-form-urlencoded'".
Command: ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
Note: Try sending a POST request with the id parameter. We can do that with curl.
Command: curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'
Note: We get a response that says "Invalid ID", which brings us to fuzzing for values.
- Value Fuzzing
Note: This section will discuss fuzzing for parameter values, which should be fairly similar to fuzzing for parameters, once we develop our wordlist.
-- Custom Wordlists
Note: When it comes to fuzzing parameter values, we may not always find a pre-made wordlist that would work for us, as each parameter would expect a certain type of value. 
Command: for i in $(seq 1 1000); do echo $i >> ids.txt; done # Bash command to create a list from 1-1000
-- Fuzzing Values
Command: ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx
